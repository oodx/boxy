#!/usr/bin/env bash
# Lint all shell scripts without executing or sourcing them.
# - Uses bash syntax check (bash -n)
# - Optionally uses shellcheck if installed

set -euo pipefail

ROOT_DIR="$(cd "$(dirname "$0")/.." && pwd)"
cd "$ROOT_DIR"

echo "üîç Linting shell scripts (syntax check)..."

# Collect .sh files, excluding common build/cache dirs
mapfile -d '' FILES < <(find . \
  -path './.git' -prune -o \
  -path './target' -prune -o \
  -path './.cdn' -prune -o \
  -type f -name '*.sh' -print0)

if [[ ${#FILES[@]} -eq 0 ]]; then
  echo "No shell scripts found."
  exit 0
fi

FAIL=0
for f in "${FILES[@]}"; do
  if ! bash -n "$f" 2> >(sed "s|^|[SYNTAX] $f: |"); then
    FAIL=1
  fi
done

if command -v shellcheck >/dev/null 2>&1; then
  echo "üîé Running shellcheck..."
  # SC1090/SC1091: allow dynamic 'source'; SC2155: ignore subshell var inlining warnings for tests
  if ! shellcheck -x -e SC1090,SC1091,SC2155 "${FILES[@]}"; then
    FAIL=1
  fi
else
  echo "‚ÑπÔ∏è shellcheck not installed; skipping static analysis"
fi

if [[ $FAIL -eq 0 ]]; then
  echo "‚úÖ Shell lint passed (${#FILES[@]} files)"
else
  echo "‚ùå Shell lint failed"
fi

exit "$FAIL"

