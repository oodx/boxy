================================================================================
 üìã BOXY RSB COMPLIANCE - DETAILED TASK BREAKDOWN
================================================================================

Format: [TICKET-ID] Task Description (Story Points) - Priority
Story Point Scale: 1=Trivial, 2=Small, 3=Medium, 5=Large, 8=Complex, 13=Epic

================================================================================
 üìã COMPLETED MILESTONES MOVED TO DONE.txt
================================================================================

‚úÖ See DONE.txt for complete archive of finished work:
   ‚Ä¢ M1: Basic Module Restructuring (23 pts) ‚úÖ COMPLETED
   ‚Ä¢ M1.5: Auto/None Properties Validation (8 pts) ‚úÖ COMPLETED
   ‚Ä¢ M1.7: Render Target Streaming (15 pts) ‚úÖ COMPLETED
   ‚Ä¢ MH: Terminal Height System (18 pts) ‚úÖ COMPLETED

üéØ Total Completed: 64 story points across 4 major milestones

================================================================================
 üö® CRITICAL API FIXES - CODEX REVIEW (9 pts)
================================================================================
Duration: Immediate | Risk: High | Blocks Room Runtime

[API-FIX-01] Fix Missing Closing Borders in Body/Status (2) - CRITICAL ‚úÖ Completed (commit 646c0dd)
  - Added missing right-side borders in src/api/layout.rs:387 and :511
  - Verified closed geometry via new snapshot-style tests

[API-FIX-02] Fix BoxBuilder Default Open Box (2) - CRITICAL ‚úÖ Completed (commit 646c0dd)
  - Auto-add empty header/footer so default builds remain sealed
  - Tests guard for closed boxes by default

[API-FIX-03] Fix Unicode-Unsafe Truncation (3) - HIGH ‚úÖ Completed (commit 646c0dd)
  - Reused truncate_with_ellipsis for header/status/body components
  - Added coverage ensuring grapheme-safe truncation

[API-TEST-01] Add Geometry Assertions (2) - HIGH ‚úÖ Completed (commit 646c0dd)
  - Added border width checks to layout tests
  - Prevents future open-border regressions

[REGRESSION-04] Restore header ellipsis rendering (2) - HIGH ‚úÖ Completed (commit c5c25ba)
  - Passed full max width to truncate_with_ellipsis; ellipsis preserved without trailing horizontals
  - Added regression test coverage for long headers

[TESTS-02] Strengthen ellipsis regression coverage (1) - Medium ‚úÖ Completed (commit 9149282)
  - Added test_header_no_trailing_horizontals to guard the '...‚îÄ' regression
  - Ensures truncated headers contain ellipsis glyph without residual horizontal filler

[TEST-API-03] Update room_runtime_integration example to new API (2) - High ‚úÖ Completed (v0.21.0)
  - Used ROUNDED BoxStyle constant instead of string in calculate_box_dimensions
  - Added Option<usize> (None) parameter for fixed_width
  - Replaced content_width/height with inner_width/inner_height fields
  - Replaced header.render()/footer.render() with component.content
  - Removed has_emoji and line_count from TextMetrics usage
  - Verified API-only feature flag build succeeds

[REG-API-05] Fix barmode auto-header injection (2) - High ‚úÖ Completed (v0.21.0)
  - BoxBuilder::build now correctly gates auto-header/footer injection to Box mode only (lines 591-605)
  - Barmode only renders explicitly requested components, no auto-injection
  - Verified with test_barmode_vs_box_mode

[REG-API-06] Strip corner glyphs in barmode content extraction (2) - High ‚úÖ Completed (v0.21.0)
  - extract_content_from_line now handles all corner characters (‚îå‚îê‚îî‚îò) and style variants
  - Header/footer text is properly embedded in horizontal bars without corner glyphs
  - Bars render as: `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄHeader‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ` instead of `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄHeader‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê`
  - All barmode tests passing with correct corner-free output

[REG-API-07] Align barmode horizontal bars to content width (1) - Medium ‚úÖ Completed (v0.21.0)
  - Changed bar_width from total_width to total_width.saturating_sub(2) for inner width alignment
  - Content lines now padded to match bar width for proper alignment
  - Bars and content are consistently sized at inner_width (no +2 overflow)

[TEST-API-01] Update dynamic_layout example to compile (1) - High ‚úÖ Completed (v0.21.0)
  - Replaced all BoxBuilder::with_width(...) calls with with_fixed_width(...) across all examples
  - Fixed dynamic_layout.rs lifetime issue with column rendering
  - Verified API-only feature-flag build compiles successfully

[TEST-API-02] Sweep examples/doc snippets for deprecated API usage (2) - Medium ‚úÖ Completed (v0.21.0)
  - Searched entire repo for `.with_width(` - replaced 14 occurrences across 5 files
  - Updated examples/*.rs, examples/README.md to current API
  - Identified additional issue: basic_box.rs uses deprecated string-based header/footer API (needs HeaderBuilder/FooterBuilder migration)

================================================================================
 ‚öôÔ∏è PERFORMANCE & ARCHITECTURE BACKLOG (New)
================================================================================

[PERF-01] Hoist strip_box ANSI regex builders (2) - High
  - src/visual/utils.rs:392-397 recompiles Regex objects for every line stripped; switch to a once_cell/lazy_static so multi-box renders stop paying compile costs.
  - Collapse the duplicate Vec<char> rebuilds that trim border glyphs to cut per-line allocations on wide content.
  - Add a micro-benchmark (e.g., benches/strip_box.rs) to track the improvement.

[PERF-02] Benchmark theme loading cache impact (3) - Medium
  - ThemeEngine::new() (src/themes/utils.rs:171) rebuilds caches on every CLI invocation; profile and cache intermediate YAML parsing results.
  - Add benches/theme_engine.rs to capture before/after timings.
  - Determine whether global lazy caches are worth the memory trade-off.

[ARCH-01] Remove process::exit from theme helpers (5) - High
  - src/themes/utils.rs:160-253 and src/themes/helpers.rs:18-216 call std::process::exit inside library helpers, which makes library embedding impossible.
  - Refactor helpers to return Result<(), ThemeError> (or similar) and move CLI-only exit/println! handling into bin/main.rs.
  - Update existing CLI commands/tests to surface errors without terminating the process inside library code.

================================================================================
 üéØ MILESTONE 2: LIBRARY API DEVELOPMENT (34 pts) - üèÅ 52% COMPLETE (18/34 pts)
================================================================================
Duration: 2-3 weeks | Risk: Medium | New Public API
Status: Phase 1 Complete - BoxBuilder API Ready for Room Grid Integration

Theme: Core Library API Design (13 pts) - ‚úÖ COMPLETE
---------------------------------------
[M2-001] Design public API surface for box drawing (5) - ‚úÖ COMPLETED (v0.21.0)
  - Define BoxBuilder pattern for ergonomic usage ‚úÖ
  - Create draw_box(), draw_text_box() functions ‚úÖ
  - Design width/height/padding configuration ‚úÖ
  - Plan async/sync variants (deferred)
  - Implemented min/max constraints for dynamic grid cells ‚úÖ
  - Added visibility control (with_visibility, hide) ‚úÖ
  - Chrome overflow protection with helpful panics ‚úÖ

[M2-002] Design theme system public API (5) - Critical
  - Create ThemeLoader, ThemeApplicator traits
  - Design theme selection and validation functions
  - Plan theme customization and override API
  - Consider theme caching strategies

[M2-003] Design color system public API (3) - High
  - Create color parsing and manipulation functions
  - Design palette selection and validation
  - Plan ANSI code generation utilities
  - Consider color space conversions

Theme: Library Implementation (13 pts) - ‚úÖ COMPLETE
--------------------------------------
[M2-004] Implement BoxBuilder and drawing functions (5) - ‚úÖ COMPLETED (v0.21.0)
  - Create BoxBuilder with fluent interface ‚úÖ
  - Implement core drawing logic for library usage ‚úÖ
  - Handle text wrapping and width calculation ‚úÖ
    * Implement with_wrapping() API (enabled by default) ‚úÖ
    * Added with_fixed_height() for exact height sizing ‚úÖ
    * Enhanced Unicode-safe dynamic width calculations ‚úÖ
  - Add validation and error handling ‚úÖ
  - Supported all 10 box styles in geometry module ‚úÖ
  - Implemented comprehensive text wrapping and height constraint features ‚úÖ
    * Preserves header, footer, and status components ‚úÖ
    * Works with all box styles and layout modes ‚úÖ
  - Added min/max width/height for dynamic grid cells ‚úÖ
  - Visibility control with conditional rendering ‚úÖ
  - 134 tests passing (111 lib + 15 integration + 8 doc) ‚úÖ

[M2-004a] Implement barmode layout system (3) - ‚úÖ COMPLETED (v0.21.0)
  - Add barmode layout rendering (top/bottom bars only, no sides/corners) ‚úÖ
  - Implement CLI support: --layout bm, --params ly='bm' ‚úÖ
  - Support barmode in BoxBuilder API for document integration ‚úÖ
  - Add barmode examples for document border use cases ‚úÖ
  - Layout-mode aware padding (respects Box vs Bar mode) ‚úÖ

[M2-005] Implement theme loading API (5) - High
  - Create theme loading from files/built-ins
  - Implement theme application to boxes
  - Add theme validation and error handling
  - Support custom theme definitions

[M2-006] Implement color manipulation utilities (3) - Medium
  - Create color parsing and validation functions
  - Implement ANSI code generation
  - Add color palette utilities
  - Support RGB/hex color inputs

Theme: Documentation & Examples (8 pts) - üèÅ PARTIALLY COMPLETE (3/8 pts)
---------------------------------------
[M2-007] Create comprehensive library documentation (3) - ‚úÖ COMPLETED (v0.21.0)
  - Write rustdoc for all public APIs ‚úÖ
  - Create usage examples for common patterns ‚úÖ
  - Document theme system for library users (pending M2-005)
  - Add migration guide from CLI usage (pending)
  - Comprehensive API_README.md with all features documented ‚úÖ
  - Examples: dynamic_constraints_test.rs, height_padding_test.rs ‚úÖ

[M2-008] Create library usage examples (3) - High
  - Basic box drawing example
  - Theme customization example
  - Color manipulation example
  - Integration with other CLI tools

[M2-009] Separate CLI and library concerns (2) - Medium
  - Move CLI-specific logic to main.rs
  - Ensure library has no CLI dependencies
  - Create clean separation of concerns
  - Test library usage without CLI

[M2-010] Refresh CLI help documentation (2) - Medium
  - Add height-related options (--height, `height` subcommand, `--params h=`) to --help output
  - Document streaming/RanderTarget guidance as part of help footer
  - Ensure CLI help reflects current theme/height features
  - Regenerate README/usage snippets after help update

[M2-011] Implement comprehensive sub-help system (5) - High
  - Create modular help screens: `boxy help layout`, `boxy help engine`, `boxy help params`, `boxy help themes`
  - Implement `boxy help colors` with interactive color preview
  - Add `boxy help examples` with copy-paste ready commands
  - Create contextual help: `boxy layout --help`, `boxy engine --help`
  - Refactor main --help to show overview + "See boxy help <topic> for details"
  - Add help topic discovery: `boxy help` lists all available help topics

================================================================================
 üéØ MILESTONE 3: UTILS/HELPERS SEPARATION (20 pts)
================================================================================
Duration: 1-2 weeks | Risk: Low | Internal Reorganization

Theme: Themes Module Separation (5 pts)
---------------------------------------
[M3-001] Create themes/utils.rs with public helpers (3) - High
  - Move load_theme(), validate_theme() to utils.rs
  - Move theme application functions to utils.rs
  - Ensure clean public interface

[M3-002] Create themes/helpers.rs with internal logic (2) - Medium
  - Move theme parsing internals to helpers.rs
  - Move YAML processing to helpers.rs
  - Keep implementation details private

[M3-009] Evaluate serde YAML replacement (2) - Medium
  - Investigate migration path from deprecated `serde_yaml 0.9` to the current community-supported crate (e.g. `serde_yml`)
  - Ensure theme serialization/deserialization APIs remain compatible
  - Update dependency tree and regression tests once replacement selected

[M3-010] Evaluate TOML vs JSON for theme storage (3) - High
  - Benchmark parse/serialize performance for representative theme sets
  - Compare ecosystem support (toml, serde_json, ron) and recommend default format
  - Decide on migration target (prefer TOML unless JSON yields material gains)

[M3-011] Migrate theme system to chosen format (5) - High
  - Implement new loader/saver using selected format
  - Provide backward-compatible YAML importer or one-shot conversion tool
  - Update documentation, examples, and tests to reflect new format
  - Drop deprecated serde_yaml dependency once migration completes

Theme: Colors Module Separation (4 pts)
---------------------------------------
[M3-003] Create colors/utils.rs with public helpers (2) - High
  - Move get_color_code(), validate_color() to utils.rs
  - Move ANSI generation functions to utils.rs

[M3-004] Create colors/helpers.rs with internal logic (2) - Medium
  - Move color parsing internals to helpers.rs
  - Move palette management to helpers.rs

Theme: Visual Module Separation (5 pts)
---------------------------------------
[M3-005] Create visual/utils.rs with public helpers (3) - High
  - Move draw_box(), calculate_width() to utils.rs
  - Move component rendering to utils.rs

[M3-006] Create visual/helpers.rs with internal logic (2) - Medium
  - Move internal width calculations to helpers.rs
  - Move box character selection to helpers.rs

Theme: Core Module Separation (4 pts)
-------------------------------------
[M3-007] Create core/utils.rs with public helpers (2) - High
  - Move configuration utilities to utils.rs
  - Move argument parsing helpers to utils.rs

[M3-008] Create core/helpers.rs with internal logic (2) - Medium
  - Move internal parsing logic to helpers.rs
  - Move configuration merging to helpers.rs

================================================================================
 üéØ MILESTONE 4: TYPED ERROR SYSTEM (16 pts)
================================================================================
Duration: 1-2 weeks | Risk: Medium | Error Handling Changes

Theme: Error Type Definition (8 pts)
------------------------------------
[M4-001] Create core/error.rs with BoxyError master enum (3) - Critical
  - Define BoxyError with variants for each module
  - Add thiserror derive and proper error messages
  - Include source error chaining

[M4-002] Create module-specific error types (5) - High
  - ThemeError in themes/error.rs
  - ColorError in colors/error.rs
  - VisualError in visual/error.rs
  - CoreError in core/error.rs

Theme: Error Migration (8 pts)
------------------------------
[M4-003] Replace String errors in themes module (3) - High
  - Update all Result<T, String> to Result<T, ThemeError>
  - Add proper error variants for theme operations
  - Update error propagation

[M4-004] Replace String errors in colors module (2) - High
  - Update color operations to use ColorError
  - Add proper error variants

[M4-005] Replace String errors in visual module (2) - High
  - Update drawing operations to use VisualError
  - Add proper error variants

[M4-006] Replace String errors in core module (1) - Medium
  - Update configuration and parsing errors
  - Ensure proper error propagation to CLI

================================================================================
 üéØ MILESTONE 5: FEATURE FLAGS & ADAPTERS (28 pts)
================================================================================
Duration: 2-3 weeks | Risk: High | Complex Feature Interactions

Theme: Feature Flag Design (8 pts)
----------------------------------
[M5-001] Design Cargo.toml feature hierarchy (5) - Critical
  - Define visual-base, visual-advanced features
  - Define colors-simple, colors-named features
  - Define themes-builtin, themes-yaml features
  - Plan default feature set

[M5-002] Implement conditional compilation (3) - High
  - Add #[cfg(feature = "...")] throughout codebase
  - Ensure graceful degradation when features disabled
  - Test feature combinations

[M5-002a] Gate height system behind cargo feature (2) - High
  - Introduce default-on `height` feature in Cargo.toml
  - Wrap height_plugin, CLI flags, and BOXY_MULTIPLEX_MODE logic in #[cfg(feature = "height")]
  - Provide no-op stubs when feature disabled to keep API compiling
  - Document build instructions for height-enabled vs minimal builds

Theme: Adapter Pattern Implementation (12 pts)
----------------------------------------------
[M5-003] Create themes/adapters.rs for color integration (5) - High
  - Implement ColorAdapter for theme ‚Üí color operations
  - Add feature gating for color dependencies
  - Provide fallbacks when colors disabled

[M5-004] Create visual/adapters.rs for theme integration (5) - High
  - Implement ThemeAdapter for visual ‚Üí theme operations
  - Add feature gating for theme dependencies
  - Provide fallbacks when themes disabled

[M5-005] Create cross-module dependency injection (2) - Medium
  - Design service locator pattern if needed
  - Implement dependency injection for adapters
  - Ensure testability

Theme: Feature Testing (8 pts)
------------------------------
[M5-006] Test all feature flag combinations (5) - Critical
  - Create CI matrix for feature combinations
  - Test minimal builds with reduced features
  - Verify no compilation errors

[M5-007] Performance testing with different features (3) - Medium
  - Benchmark performance with minimal features
  - Ensure no overhead when features disabled
  - Validate binary size reduction

================================================================================
 üéØ MILESTONE 6: CURATED PRELUDE & MACROS (14 pts)
================================================================================
Duration: 1-2 weeks | Risk: Medium | Public API Changes

Theme: Prelude Curation (8 pts)
-------------------------------
[M6-001] Remove wildcard re-exports from lib.rs (5) - Critical
  - Replace pub use module::* with specific exports
  - Define intentional public API surface
  - Ensure backward compatibility via explicit exports

[M6-002] Implement ASCII-first naming conventions (3) - Medium
  - Audit public API for non-ASCII names
  - Provide ASCII alternatives where needed
  - Document Unicode variants

Theme: Macro System (6 pts)
---------------------------
[M6-003] Create module-owned macros (3) - Medium
  - Add macros.rs to each module as needed
  - Implement ergonomic macros for common operations
  - Ensure macros follow RSB patterns

[M6-004] Final RSB MODULE_SPEC compliance validation (3) - High
  - Audit entire codebase against RSB MODULE_SPEC
  - Fix any remaining compliance issues
  - Document compliance status


### CRITICAL FUNCTION PROTECTION TASKS (Added to All Milestones):

[MX-P01] Width calculation protection validation (1) - Critical
  - Test emoji width calculations before/after changes
  - Validate: echo "‚úÖüöÄ‚ÑπÔ∏èüëª" | cargo run -- --theme test
  - Run: ./bin/test.sh && ./bin/feature-test.sh

[MX-P02] Icon placement protection validation (1) - Critical
  - Test icon auto-detection and spacing
  - Validate: echo "test" | cargo run -- --title "üì¶ Status"
  - Ensure parser.rs:385-410 logic preserved exactly

[MX-P03] Performance regression protection (1) - Critical
  - Benchmark width calculations before/after
  - No performance degradation in emoji rendering
  - Run: ./tests/misc/performance_test.sh

================================================================================
 üìä PRE-M3 TECHNICAL DEBT TASKS
================================================================================

üêî CHINA TECHNICAL DEBT (12 tickets, ~45 story points HIGH priority)
================================================================

Critical Pre-M3 Tasks (HIGH Priority):
---------------------------------------
[CHINA-01] Theme System Architecture Cleanup (LARGE) - High
  - Resolve dual theme system technical debt (legacy HashMap vs YAML)
  - Deprecate legacy system with migration warnings and tools
  - Create compatibility shims with clear deprecation timeline

[CHINA-02] Theme Inheritance Engine Critical Bug Fix (MEDIUM) - High
  - Fix theme rejection when color empty after inheritance (line 336-339)
  - Implement proper color property inheritance logic
  - Add comprehensive inheritance chain validation tests

[CHINA-05] Library API Ergonomics Enhancement (LARGE) - High
  - Design and implement ergonomic BoxBuilder pattern for M2
  - Create fluent interface with sensible defaults
  - Maintain backward compatibility with CLI patterns
  - See [CHINA-05A] for migration execution plan

[CHINA-05A] Legacy CLI ‚Üí API Migration Roadmap (MEDIUM) - High
  - Phase 1: Compatibility adapter
    - Implement `From<&BoxyConfig> for BoxLayout` bridging struct
    - Ensure adapter copies title/icon/divider configuration and preserves width/height semantics
    - Add parity tests that render identical outputs through legacy `draw_box` and new adapter
  - Phase 2: API surface parity
    - Extend `api::layout` builders with title/icon/divider/padding support and expose component metadata helpers
    - Teach `api::theming` to style individual sections (header/title/status/body/footer) to match CLI colouring
    - Document new API capabilities in `API_README.md`
  - Phase 3: CLI switchover
    - Update `src/main.rs` to emit boxes via adapter + API renderers instead of `draw_box`
    - Wire theme/colour handling through the new component metadata, validating protected icon logic stays intact
    - Add regression tests covering CLI flags that previously depended on legacy behaviour
  - Phase 4: Ecosystem updates
    - Migrate benches, demos (e.g. `boxy_dashboard.rs`) and snapshot fixtures to use API builders/adapter
    - Run golden-output diff to confirm no behavioural drift
  - Phase 5: Legacy retirement
    - Collapse `draw_box`/`render_to_string` onto the API pipeline and remove redundant code paths
    - Delete `BoxyConfig` once no caller constructs it; update documentation and changelog with migration guidance
    - Final verification: run full test matrix, benchmarks, and protected width/icon validation scripts

[CHINA-08] Comprehensive Integration Documentation (MEDIUM) - High
  - Create integration cookbook with TUI framework examples
  - Document environment variables and configuration options
  - Add troubleshooting guide and migration documentation

Post-M3 Optimization Tasks (MEDIUM Priority):
----------------------------------------------
[CHINA-03] Performance Optimization - Template Caching (MEDIUM) - Medium
[CHINA-04] Memory Efficiency - Large Padding Operations (MEDIUM) - Medium
[CHINA-06] Error Handling Library vs CLI Consistency (MEDIUM) - Medium
[CHINA-07] Theme Discovery UX Improvements (SMALL) - Medium
[CHINA-09] Development Environment & Testing Improvements (MEDIUM) - Medium
[CHINA-11] Feature Flag Architecture Refinement (MEDIUM) - Medium
[CHINA-12] Cross-Platform Unicode Compatibility (MEDIUM) - Medium

Strategic Preparation (LOW Priority):
-------------------------------------
[CHINA-10] Meteor Token System Integration Preparation (LARGE) - Low

üî¥ TINA TESTING DEBT (18 tickets, organized in 4 phases)
=====================================================

ü™Ñ QOL POLISH BACKLOG (NEW)
==========================

[QOL-01] Geometry/style width documentation (SMALL) - Medium ‚úÖ COMPLETED
  - Document how style-provided ANSI attributes influence width math in `calculate_box_dimensions`
  - Add regression tests covering styles that inject ANSI sequences to ensure width stays accurate
  - Clarify usage expectations in `API_README.md` and source comment (`src/api/geometry.rs:145`)

[QOL-02] Per-component theming hooks (MEDIUM) - High ‚úÖ COMPLETED
  - Extend `api::theming` to style header/body/status/footer independently without string reparse
  - Introduce callbacks/renderer trait that accepts `ComponentLayout` metadata
  - Add regression tests covering section-specific coloring

[QOL-03] High-level preset templates (MEDIUM) - Medium
  - Provide `BoxTemplate`/`PresetTheme` constructors for common layouts (status panel, notification, banner)
  - Integrate with `BoxBuilder::preset("...")` style API and document usage

[QOL-04] Typed error surface exposure (MEDIUM) - Medium
  - Surface planned Milestone 4 error enums through the public API (`Result<T, BoxyError>`)
  - Replace panic paths in layout/geometry/theming modules with typed errors where appropriate
  - Update API docs with new error semantics

[QOL-05] Background/foreground composition helpers (SMALL) - Medium
  - Add helpers on `ComponentLayout` or renderer options to apply background colors per line safely
  - Ensure coexistence with foreground theming without manual ANSI handling

[QOL-06] One-shot layout wrappers (MEDIUM) - Low
  - Introduce ergonomic wrappers (e.g., `PlainBox::new("text").width(40).render()`) that compose geometry + layout
  - Keep builders accessible for advanced scenarios; document trade-offs in `API_README.md`

üêû BUG TRACKER
==============

[BUG-01] Title handling regression in CLI‚ÜíAPI adapter (CRITICAL) - High ‚úÖ COMPLETED
  - `BoxLayout::from(&BoxyConfig)` maps `title` into the header builder, which renders outside the body
  - Breaks existing CLI behaviour where titles appear as the first body line (`Body::compose_content_lines`)
  - Restore parity by keeping titles in body content until API builders expose a dedicated title slot

Phase 1: Testing Infrastructure (HIGH Priority):
------------------------------------------------
[TEST-01] Benchmark Integration into test.sh workflow (MEDIUM) - High
  - Add --benchmark and --snap-benchmarks flags to test.sh
  - Create automated performance regression detection

[TEST-02] Performance Regression Detection (MEDIUM) - High
  - Implement threshold-based validation (2.0ms max render time)
  - Fail builds when performance degrades beyond acceptable limits

[TEST-03] Enhanced Snap.sh Versioning (SMALL) - Medium
  - Add versioned snapshots with timestamp tracking
  - Enable performance comparison across versions

[TEST-04] Cargo Test Integration (SMALL) - Medium
  - Integrate unit tests into test.sh comprehensive workflow

Phase 2: RSB Architecture Compliance (HIGH Priority):
-----------------------------------------------------
[TEST-05] RSB Module Structure Migration (LARGE) - High
  - Convert 9 flat .rs files to proper RSB module directories
  - Closes 65% RSB compliance gap (35% ‚Üí 90%+)

[TEST-06] Typed Error System Implementation (MEDIUM) - High
  - Replace Result<T, String> with proper typed error enums
  - Follow RSB error handling patterns

[TEST-07] Feature Gate Implementation (MEDIUM) - Medium
  - Add conditional compilation for visual components
  - Enable lean builds for headless environments

[TEST-08] Curated Prelude Implementation (SMALL) - Medium
  - Replace wildcard re-exports with specific curated prelude

Phase 3: Test Automation Enhancement (MEDIUM Priority):
-------------------------------------------------------
[TEST-09] Automated Visual Test Assertions (MEDIUM) - Medium
[TEST-10] Comprehensive Regression Testing (MEDIUM) - Medium
[TEST-11] Test Coverage Reporting (SMALL) - Low

Phase 4: Quality Assurance Processes (MEDIUM Priority):
-------------------------------------------------------
[TEST-12] Performance Monitoring Dashboard (MEDIUM) - Medium
[TEST-13] RSB Compliance Tracking (SMALL) - Medium
[TEST-14] Documentation Test Validation (SMALL) - Low
[TEST-15] Shell Script Standardization (SMALL) - Low
[TEST-16] CI/CD Pipeline Integration (MEDIUM) - Medium
[TEST-17] Test Environment Standardization (MEDIUM) - Low
[TEST-18] Security Testing Integration (SMALL) - Low

================================================================================
 üìä TASK SUMMARY BY MILESTONE
================================================================================

‚úÖ COMPLETED (See DONE.txt):
M1, M1.5, M1.7, MH: 64 story points across 4 major milestones
M2.0 Phase 1: 18 story points - BoxBuilder API & Layout System ‚úÖ

üî¥ PRE-M3 TECHNICAL DEBT:
CHINA (45 pts): 12 tickets - Architecture, performance, UX, documentation debt
TEST (63 pts): 18 tickets - RSB compliance, testing infrastructure, automation

‚¨ÜÔ∏è UPCOMING MILESTONES:
M2 Phase 2 (16 pts): 5 remaining tasks - Theme/Color public APIs
M3 (18 pts): 8 tasks - Utils/helpers separation + YAML‚ÜíTOML migration
M4 (16 pts): 6 tasks - Typed error system
M5 (28 pts): 7 tasks - Feature flags & adapters
M6 (14 pts): 4 tasks - Curated prelude & macros

Completed: 82 story points (64 + M2.0 Phase 1: 18)
Technical Debt: 108 story points (CHINA + TEST tickets)
Remaining Core: 100 story points across 31 tasks
Total Project: 290 story points across 76 tasks

================================================================================
 üéØ TASK PRIORITIZATION
================================================================================

Critical Path Tasks (Must complete first):
- M1-001 through M1-008: Module structure setup
- M2-001, M2-002: API design (blocks implementation)
- M4-001: Master error enum (blocks error migration)
- M5-001: Feature flag design (blocks implementation)
- M6-001: Prelude curation (final API surface)

High Risk Tasks (Need extra attention):
- M2-001: Public API design (affects all future work)
- M5-001: Feature flag hierarchy (complex interactions)
- M5-006: Feature combination testing (high complexity)
- M6-001: Wildcard removal (potential breaking changes)

Dependencies:
- M3 depends on M1 completion
- M4 can run parallel to M3
- M5 depends on M1-M4 completion
- M6 depends on all previous milestones

================================================================================
