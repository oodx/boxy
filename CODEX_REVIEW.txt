================================================================================
CODEX REVIEW: Boxy Library API Critical Issues
================================================================================

Date: 2025-09-25
Reviewer: CODEX
Subject: Library API Architecture Review - Critical Regressions Found

================================================================================
EXECUTIVE SUMMARY
================================================================================

Review identified 3 CRITICAL REGRESSIONS in the new API that break box rendering:
1. Body/Status components missing closing borders (boxes rendered open)
2. BoxBuilder default behavior changed (no longer produces closed boxes)
3. Truncation logic bypasses Unicode-safe utilities (can split graphemes)

These issues compromise the core box-drawing contract and must be fixed before
Room Runtime adoption.

================================================================================
CRITICAL REGRESSIONS
================================================================================

[REGRESSION-01] MISSING CLOSING BORDERS IN BODY/STATUS
--------------------------------------------------------
SEVERITY: CRITICAL - Boxes render incorrectly (open on right side)
FILES AFFECTED:
- src/api/layout.rs:387 (Body component)
- src/api/layout.rs:511 (Status component)

ISSUE:
Body and Status renderers are missing the closing vertical border character.
They render: "│  content  " instead of "│  content  │"

IMPACT:
- Reported widths are incorrect (missing 1 character)
- Boxes appear broken/unclosed
- Room Runtime will get malformed geometry

FIX REQUIRED:
Add the closing vertical border to format strings:
```rust
// src/api/layout.rs:387 (create_padding_line)
format!("{}{}{}",
    style.vertical,
    " ".repeat(inner_width),
    style.vertical  // <- ADD THIS
)

// src/api/layout.rs:511 (render_status_line)
format!("{}{}{}{}{}",  // <- Update to 5 placeholders
    style.vertical,
    " ".repeat(self.padding),
    status_content,
    " ".repeat(self.padding),
    style.vertical  // <- ADD THIS
)
```

[REGRESSION-02] BOXBUILDER DEFAULT PRODUCES OPEN BOX
-----------------------------------------------------
SEVERITY: HIGH - API contract violation
FILE AFFECTED:
- src/api/layout.rs:560 (BoxBuilder::build)

ISSUE:
BoxBuilder::new() creates a box with no header/footer by default, resulting
in an open box (no top/bottom borders). This violates the expected contract
that a default box should be fully closed.

IMPACT:
- Unexpected behavior for API consumers
- Room Runtime must manually add empty headers/footers
- Breaks principle of least surprise

FIX REQUIRED:
Auto-add empty header/footer if not provided:
```rust
// src/api/layout.rs:560 (build method)
let header = self.header
    .or_else(|| Some(HeaderBuilder::empty()))
    .map(|h| h.with_style(self.style).build_for_width(inner_width));

let footer = self.footer
    .or_else(|| Some(FooterBuilder::empty()))
    .map(|f| f.with_style(self.style).build_for_width(inner_width));
```

[REGRESSION-03] CUSTOM TRUNCATION BYPASSES UNICODE SAFETY
----------------------------------------------------------
SEVERITY: MEDIUM - Unicode correctness issue
FILES AFFECTED:
- src/api/layout.rs:154 (HeaderBuilder::truncate_to_width)
- src/api/layout.rs:396 (BodyBuilder::truncate_line)
- src/api/layout.rs:520 (StatusBuilder::truncate_status)

ISSUE:
New truncation helpers iterate over chars() directly instead of using
the existing Unicode-safe truncate_with_ellipsis function. This can:
1. Split grapheme clusters (breaking emoji/combining chars)
2. Cause width calculation drift from main implementation
3. Duplicate logic that should be centralized

IMPACT:
- Emoji/combining characters may be split incorrectly
- Width calculations may differ from core implementation
- Maintenance burden of duplicate logic

FIX REQUIRED:
Replace custom truncation with calls to existing utility:
```rust
// Instead of custom char iteration:
use crate::truncate_with_ellipsis;

fn truncate_to_width(&self, text: &str, max_width: usize) -> String {
    if max_width <= 3 {
        return self.style.horizontal.repeat(max_width);
    }

    let truncated = truncate_with_ellipsis(text, max_width - 3);
    format!("{}{}",
        truncated,
        self.style.horizontal.repeat(max_width - get_text_width(&truncated))
    )
}
```

================================================================================
TEST COVERAGE GAPS
================================================================================

[TESTS-01] LAYOUT TESTS NEED GEOMETRY ASSERTIONS
-------------------------------------------------
FILE: src/api/layout.rs (test module)

ISSUE:
Current tests only check for substring presence, not complete box geometry.
This allowed the border regressions to pass undetected.

RECOMMENDATION:
Add explicit geometry assertions:
```rust
#[test]
fn test_box_has_closing_borders() {
    let layout = BoxBuilder::new("test").build();
    let rendered = layout.render();

    // Check all borders present
    assert!(rendered.starts_with("┌"));
    assert!(rendered.contains("┐\n"));
    assert!(rendered.contains("\n│") && rendered.contains("│\n"));
    assert!(rendered.ends_with("┘"));

    // Verify width consistency
    let lines: Vec<&str> = rendered.lines().collect();
    let expected_width = layout.total_width;
    for line in lines {
        assert_eq!(get_text_width(line), expected_width,
            "Line width mismatch: {}", line);
    }
}
```

================================================================================
ADDITIONAL OBSERVATIONS
================================================================================

[ARCH-01] PROTECTED MACRO RE-EXPORTS
-------------------------------------
The API correctly re-exports protected macros, maintaining calculation
consistency. This is good architectural practice.

[UNICODE-01] WIDTH HANDLING GENERALLY CORRECT
----------------------------------------------
Main width calculations properly use unicode-width crate and handle
emoji/CJK correctly. Only the truncation helpers have issues.

[API-01] BUILDER PATTERN WELL IMPLEMENTED
------------------------------------------
Component builders follow good patterns, just need the fixes above.

================================================================================
RECOMMENDED ACTION PLAN
================================================================================

IMMEDIATE (Before Room Runtime Use):
1. Fix REGRESSION-01: Add missing closing borders to Body/Status
2. Fix REGRESSION-02: Auto-add empty header/footer in BoxBuilder
3. Fix REGRESSION-03: Use truncate_with_ellipsis consistently
4. Add TESTS-01: Comprehensive geometry assertions

SHORT TERM:
5. Add integration tests with Room Runtime patterns
6. Benchmark API performance vs direct usage
7. Document the fixed behavior clearly

VALIDATION:
After fixes, verify:
- All boxes render with complete borders
- Default BoxBuilder produces closed box
- Emoji/grapheme clusters truncate correctly
- All geometry assertions pass

================================================================================
END OF REVIEW
================================================================================